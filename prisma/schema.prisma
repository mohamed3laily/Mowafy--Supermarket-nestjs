// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                       String          @id @default(uuid())
  fullName                 String
  userName                 String          @unique
  email                    String          @unique
  password                 String
  imageUrl                 String?
  status                   UserStatus      @default(ACTIVE)
  emailVerified            Boolean         @default(false)
  role                     Role          @default(USER)
  addresses                Address[]
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  orders                   Order[]
  wishlist                 Product[]       @relation("Wishlist")
  reviews                  ProductReview[]
  passwordResetToken       String?
  passwordResetTokenExpiry DateTime?
  cart                     ShoppingCart?

  @@index(userName)
}

model Product {
  id          String          @id @default(uuid())
  name        String          @unique
  description String
  price       Decimal
   discount Float @default(0)
  imageUrl    String
  categoryId  String?
  category    Category?       @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  wishlists   User[]          @relation("Wishlist")
  
  cartItems   CartItem[]
  reviews     ProductReview[]
  inStock     Boolean         @default(true)
  stock       Int
  createdAt   DateTime        @default(now())

  @@index(name)
}

model ProductReview {
  id     String @id @default(cuid())
  content   String
  rating Int

  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId], name: "UniqueProductProductReview")
  @@index([userId])
  @@index([productId])
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  imageUrl    String?

  products Product[]

  @@index(name)
}

model Order {
  id            String        @id @default(uuid())
  orderDate     DateTime      @default(now())
  totalAmount   Float
  User          User          @relation(fields: [userId], references: [id])
  userId        String
  orderItems    OrderItem[]
  status        OrderStatus   @default(PENDING)
  address        Address?      @relation(fields: [addressId], references: [id])
  addressId      String?
  paymentMethod PaymentMethod
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
}

model ShoppingCart {
  user   User       @relation(fields: [userId], references: [id])
  userId String     @id
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  cart      ShoppingCart @relation(fields: [cartId], references: [userId])
  cartId    String
  product   Product      @relation(fields: [productId], references: [id])
  productId String
  count     Int

  @@unique([cartId, productId], name: "UniqueCartItem")
}

model Address {
  id         String @id @default(cuid())
  address1    String
  address2     String
  city       String
  phone      String
  postalCode String

  user   User    @relation(fields: [userId], references: [id])
  userId String
  orders Order[]

  createdAt DateTime @default(now())

  @@index([userId])
}

// Enums

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  ACTIVE
  INACTIVE
  PENDING
  COMPLETED
  CANCELLED
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum PaymentMethod {
  CASH
  CARD
  PAYPAL
}
